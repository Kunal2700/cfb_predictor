# -*- coding: utf-8 -*-
"""AIProjectDataCollector.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eJkcKKGxG5mNxez8qsdR4Fm_aJoKSVmU
"""

def compare(teams, table_columns):
  team1 = teams[0]
  team2 = teams[1]
  attributes = {}

  for column in table_columns:
    if column in team1.columns and column in team2.columns:
      try:
        if (column in ['thirdDownEff', 'completionAttempts']):
          comp1, att1 = team1[column]['stat'].split('-')
          comp2, att2 = team2[column]['stat'].split('-')
          
          comp1 = float(comp1)
          comp2 = float(comp2)

          att1 = float(att1)
          att2 = float(att2)

          if (att1 == 0 or att2 == 0):
            attr = '?'
          else:
            eff1 = comp1 / att1
            eff2 = comp2 / att2

            # Make comparison
            attr = int(eff1 > eff2)

        elif (column == 'totalPenaltiesYards'):
          py1 = team1[column]['stat'].split('-')
          tp1 = float(py1[0])
          yards1 = float(py1[1])

          py2 = team2[column]['stat'].split('-')
          tp2 = float(py2[0])
          yards2 = float(py2[1])

          # Make comparison
          attr = int(yards1 > yards2)

        elif (column == 'possessionTime'):
          hours1, min1 = team1[column]['stat'].split(':')
          hours2, min2 = team2[column]['stat'].split(':')

          pos1 = 60 * float(hours1) + int(min1)
          pos2 = 60 * float(hours2) + int(min2)

          attr = int(pos1 > pos2)

        elif (column == 'points'):
          score1 = team1[column]['stat']
          score2 = team2[column]['stat']

          attr = int(score1 > score2)

        elif (column == 'homeAway'):
          attr = int(team1[column]['stat'] == 'home')
        
        else:
          stat1 = float(team1[column]['stat'])
          stat2 = float(team2[column]['stat'])

          attr = int(stat1 > stat2)

      except (ValueError):
        attr = '?'

      attributes[column] = attr
    else:
      attributes[column] = '?'

  return attributes

def normalize(team, table_columns):
  team1 = teams[0]
  team2 = teams[1]
  attributes = {}

  for column in table_columns:
    if column in team1.columns and column in team2.columns:
      try:
        if (column in ['thirdDownEff', 'completionAttempts']):
          comp1, att1 = team1[column]['stat'].split('-')
          comp2, att2 = team2[column]['stat'].split('-')
          
          comp1 = float(comp1)
          comp2 = float(comp2)

          att1 = float(att1)
          att2 = float(att2)

          if (att1 == 0 or att2 == 0):
            attr = '?'
          else:
            eff1 = comp1 / att1
            eff2 = comp2 / att2

            # Make comparison
            attr = eff1 - eff2

        elif (column == 'totalPenaltiesYards'):
          py1 = team1[column]['stat'].split('-')
          tp1 = float(py1[0])
          yards1 = float(py1[1])

          py2 = team2[column]['stat'].split('-')
          tp2 = float(py2[0])
          yards2 = float(py2[1])

          # Make comparison
          attr = yards1 - yards2

        elif (column == 'possessionTime'):
          hours1, min1 = team1[column]['stat'].split(':')
          hours2, min2 = team2[column]['stat'].split(':')

          pos1 = 60 * float(hours1) + int(min1)
          pos2 = 60 * float(hours2) + int(min2)

          attr = pos1 - pos2

        elif (column == 'points'):
          score1 = team1[column]['stat']
          score2 = team2[column]['stat']

          attr = int(score1 > score2)

        elif (column == 'homeAway'):
          attr = int(team1[column]['stat'] == 'home')
        
        else:
          stat1 = float(team1[column]['stat'])
          stat2 = float(team2[column]['stat'])

          attr = stat1 - stat2

      except (ValueError):
        attr = '?'

      attributes[column] = attr
    else:
      attributes[column] = '?'

  return attributes

def flatten_decision(teams):
  team1 = teams[0]
  team2 = teams[1]
  
  score1 = team1['points']
  score2 = team2['points']

  attr1 = int(score1 > score2)
  attr2 = int(not attr1)

  team1['points'] = attr1
  team2['points'] = attr2

  return (team1, team2)

import pandas as pd
from google.colab import drive
from google.colab import files
drive.mount('/content/gdrive')
# uploaded = files.upload()


import json

# df_train = pd.read_csv(uploaded)
# df_test = pd.read_csv(uploaded)

with open('/content/gdrive/My Drive/data.json') as json_file:
  data = json.load(json_file)
  print(len(data))

import requests
import pandas as pd
import json
from google.colab import drive
drive.mount('/content/gdrive')

years = range(2004, 2020)
conferences = ['B1G', 'ACC', 'B12', 'SEC', 'PAC', 'CUSA', 'MAC', 'MWC', 'Ind', 'SBC', 'AAC', 'Western', 'Ivy', 'BE']

items = []
for y in years:
  for c in conferences:
    parameters = {'year': y, 'conference': c}
    r = requests.get('https://api.collegefootballdata.com/games/teams', headers={'Authorization': 'Bearer ODS/wU8y6SGA3Nh+y84t1xzcQYt+nR+jI1zigqYlS/qs1eDHnZak2uFtQm3IJzA1'}, params=parameters)
    items.append(r.json())



jsonString = json.dumps(items)
jsonFile = open("/content/gdrive/My Drive/data.json", "w")
jsonFile.write(jsonString)
jsonFile.close()

import pandas as pd

table_columns = ['homeAway', 'fumblesRecovered', 'puntReturnYards', 'puntReturnTDs', 'puntReturns', 'firstDowns', 'thirdDownEff', 'totalYards', 'netPassingYards', 'completionAttempts', 'yardsPerPass', 'rushingYards', 'rushingAttempts', 'yardsPerRushAttempt', 'totalPenaltiesYards', 'turnovers', 'fumblesLost', 'interceptions', 'possessionTime', 'points']
df_train = pd.DataFrame(columns=table_columns)
df_test = pd.DataFrame(columns=table_columns)

count = 0
# Need to check if empty?
for conf_year in data:
  for game in conf_year:
    teams = []
    for team in game['teams']:
      # Converting JSON to pandas df
      df_team = pd.json_normalize(team, record_path =['stats'])

      # Adding homeAway stat
      homeAway = team['homeAway']
      df_team.loc[len(df_team.index)] = ['homeAway', homeAway] 

      # Adding points stat
      points = team['points']
      df_team.loc[len(df_team.index)] = ['points', points] 

      # Filtering columns not in table_columns
      indexNames = df_team[~df_team['category'].isin(table_columns)].index
      # Delete these row indexes from dataFrame
      df_team.drop(indexNames, inplace=True)

      # Formatting df
      df_team = df_team.T
      df_team.columns = df_team.iloc[0]
      df_team.drop(df_team.index[0], inplace=True)
      teams.append(df_team)

    # Form new df by making comparisons b/w 2 teams
    row = compare(teams, table_columns)
    count += 1
    if count % 10 == 0:
      df_test = df_test.append(row, ignore_index=True)
      if count % 1000 == 0:
        print(f'{count} games and counting...')
    else:
      df_train = df_train.append(row, ignore_index=True)

log_df_train

import pandas as pd

table_columns = ['homeAway', 'fumblesRecovered', 'puntReturnYards', 'puntReturnTDs', 'puntReturns', 'firstDowns', 'thirdDownEff', 'totalYards', 'netPassingYards', 'completionAttempts', 'yardsPerPass', 'rushingYards', 'rushingAttempts', 'yardsPerRushAttempt', 'totalPenaltiesYards', 'turnovers', 'fumblesLost', 'interceptions', 'possessionTime', 'points']

log_df_train = pd.DataFrame(columns=table_columns)
log_df_test = pd.DataFrame(columns=table_columns)

count = 0
# Need to check if empty?
for conf_year in data:
  for game in conf_year:
    teams = []
    for team in game['teams']:
      # Converting JSON to pandas df
      df_team = pd.json_normalize(team, record_path =['stats'])

      # Adding homeAway stat
      homeAway = team['homeAway']
      df_team.loc[len(df_team.index)] = ['homeAway', homeAway] 

      # Adding points stat
      points = team['points']
      df_team.loc[len(df_team.index)] = ['points', points] 

      # Filtering columns not in table_columns
      indexNames = df_team[~df_team['category'].isin(table_columns)].index
      # Delete these row indexes from dataFrame
      df_team.drop(indexNames, inplace=True)

      # Formatting df
      df_team = df_team.T
      df_team.columns = df_team.iloc[0]
      df_team.drop(df_team.index[0], inplace=True)
      teams.append(df_team)

    df_team = normalize(teams, table_columns)
    count += 1

    if count % 10 == 0:
      log_df_test = log_df_test.append(df_team, ignore_index=True)
      if count % 1000 == 0:
        print(f'{count} games and counting...')
    else:
      log_df_train = log_df_train.append(df_team, ignore_index=True)

log_df_test

df_train.to_csv('/content/gdrive/My Drive/TrainingData.csv', index=False)
df_test.to_csv('/content/gdrive/My Drive/TestingData.csv', index=False)

log_df_train.to_csv('/content/gdrive/My Drive/LogTrainingData.csv', index=False)
log_df_test.to_csv('/content/gdrive/My Drive/LogTestingData.csv', index=False)